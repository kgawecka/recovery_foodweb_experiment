data_test %>% select(community,recovery,scale) %>%
mutate(effect="community food web") %>%
rename(treatment="community")) %>%
left_join(., df_comms, by=c("treatment"="community"))
data_plot$effect = factor(data_plot$effect,
levels=c("number of communities","location of communities","community food web"))
data_plot[is.na(data_plot)] = 0
data_plot = data_plot %>%
mutate(treatment=as.factor(fct_reorder(treatment, n_species+0.01*trophic_levels)))
groups_to_split = c("1A","1A-1P","1A-1P-1H","2A-1P-1H","3A-1P-1H")
x_positions = as.numeric(factor(groups_to_split, levels=levels(data_plot$treatment))) + 0.5-4
vline_data = data.frame(xintercept=x_positions,
effect="community food web")
vline_data$effect = factor(vline_data$effect,
levels=c("number of communities","location of communities","community food web"))
# plot
if(unique(data_test$scale)=="empty patches"){
p = ggplot(data=NULL, aes(x=treatment)) +
geom_point(data=data_plot, aes(y=log1p(recovery)),
position=position_jitter(width=0.1, height=0),
size=0.5, alpha=0.05, col=col_blue_dark) +
geom_errorbar(data=preds, aes(ymin=conf.low, ymax=conf.high),
width=0, col=col_blue_dark) +
geom_point(data=preds, aes(y=estimate, shape=sig),
size=2, fill="white", col=col_blue_dark) +
geom_vline(data=vline_data, aes(xintercept=xintercept), col="grey", linetype="dashed") +
facet_grid(scale~effect, scales="free_x", space="free_x",
labeller=labeller(effect=label_wrap_gen(width=12))) +
coord_cartesian(ylim=c(log1p(min(data_plot$recovery)),log1p(max(data_plot$recovery)))) +
scale_shape_manual(values=c(21,19), drop=FALSE, guide="none") +
scale_x_discrete(labels=c("1"="1\n \n ","4"="4\n \n ",
"central"="central\n \n ","peripheral"=" \nperipheral\n ",
"1A"=" \n \n1A","2A"=" \n \n2A","1A-1P"=" \n1P\n1A",
"3A"=" \n \n3A","1A-2P"=" \n2P\n1A","2A-1P"=" \n1P\n2A",
"1A-1P-1H"="1H\n1P\n1A",
"2A-2P"=" \n2P\n2A","3A-1P"=" \n1P\n3A",
"1A-2P-1H"="1H\n2P\n1A","2A-1P-1H"="1H\n1P\n2A",
"3A-2P"=" \n2P\n3A","2A-2P-1H"="1H\n2P\n2A",
"3A-1P-1H"="1H\n1P\n3A","3A-2P-1H"="1H\n2P\n3A")) +
labs(y="ln(recovery credit +1)") +
theme(panel.background=element_rect(fill="white", colour="grey"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
axis.text.x=element_text(size=8), axis.text.y=element_text(size=6),
axis.title=element_text(size=8), axis.title.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=8),
legend.position="bottom", legend.text=element_text(size=8), legend.key=element_blank())
}else{
p = ggplot(data=NULL, aes(x=treatment)) +
geom_point(data=data_plot, aes(y=log1p(recovery)),
position=position_jitter(width=0.1, height=0),
size=0.5, alpha=0.05, col=col_blue_dark) +
geom_errorbar(data=preds, aes(ymin=conf.low, ymax=conf.high),
width=0, col=col_blue_dark) +
geom_point(data=preds, aes(y=estimate, shape=sig),
size=2, fill="white", col=col_blue_dark) +
geom_vline(data=vline_data, aes(xintercept=xintercept), col="grey", linetype="dashed") +
facet_grid(scale~effect, scales="free_x", space="free_x",
labeller=labeller(effect=label_wrap_gen(width=12))) +
coord_cartesian(ylim=c(log1p(min(data_plot$recovery)),log1p(max(data_plot$recovery)))) +
scale_shape_manual(values=c(21,19), drop=FALSE, guide="none") +
scale_x_discrete(labels=c("1"="1\n \n ","4"="4\n \n ",
"central"="central\n \n ","peripheral"=" \nperipheral\n ",
"1A"=" \n \n1A","2A"=" \n \n2A","1A-1P"=" \n1P\n1A",
"3A"=" \n \n3A","1A-2P"=" \n2P\n1A","2A-1P"=" \n1P\n2A",
"1A-1P-1H"="1H\n1P\n1A",
"2A-2P"=" \n2P\n2A","3A-1P"=" \n1P\n3A",
"1A-2P-1H"="1H\n2P\n1A","2A-1P-1H"="1H\n1P\n2A",
"3A-2P"=" \n2P\n3A","2A-2P-1H"="1H\n2P\n2A",
"3A-1P-1H"="1H\n1P\n3A","3A-2P-1H"="1H\n2P\n3A")) +
labs(y="ln(recovery credit +1)") +
theme(panel.background=element_rect(fill="white", colour="grey"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
axis.text.x=element_text(size=8), axis.text.y=element_text(size=6),
axis.title=element_text(size=8), axis.title.x=element_blank(),
strip.background=element_blank(),
strip.text.x=element_blank(), strip.text.y=element_text(size=8),
legend.position="bottom", legend.text=element_text(size=8), legend.key=element_blank())
}
return(p)
}
plot_model_prediction_partfig_3 = function(data_test, df_comms){
# linear anova, recovery log(x+1) transformed (to deal with 0-values)
anova_m2 = lm(log1p(recovery) ~ landscape_patches*landscape_type*community, data=data_test)
# predictions
preds = rbind(avg_predictions(anova_m2, variables="landscape_patches", by="landscape_patches") %>%
mutate(sig=ifelse(anova(anova_m2)[1,5]<0.05,"sig","NS"),
effect="number of communities") %>%
rename(treatment="landscape_patches"),
avg_predictions(anova_m2, variables="landscape_type", by="landscape_type") %>%
mutate(sig=ifelse(anova(anova_m2)[2,5]<0.05,"sig","NS"),
effect="location of communities") %>%
rename(treatment="landscape_type")) %>%
left_join(., df_comms, by=c("treatment"="community"))
preds$sig = factor(preds$sig, levels=c("NS", "sig"))
preds$effect = factor(preds$effect,
levels=c("number of communities","location of communities"))
preds[is.na(preds)] = 0
# transform data for plotting
data_plot = rbind(data_test %>% select(landscape_patches,recovery,scale) %>%
mutate(effect="number of communities") %>%
rename(treatment="landscape_patches"),
data_test %>% select(landscape_type,recovery,scale) %>%
mutate(effect="location of communities") %>%
rename(treatment="landscape_type")) %>%
left_join(., df_comms, by=c("treatment"="community"))
data_plot$effect = factor(data_plot$effect,
levels=c("number of communities","location of communities"))
data_plot[is.na(data_plot)] = 0
# plot
if(unique(data_test$scale)=="empty patches"){
p = ggplot(data=NULL, aes(x=treatment)) +
geom_point(data=data_plot, aes(y=log1p(recovery)),
position=position_jitter(width=0.1, height=0),
size=0.5, alpha=0.05, col=col_blue_dark) +
geom_errorbar(data=preds, aes(ymin=conf.low, ymax=conf.high),
width=0, col=col_blue_dark) +
geom_point(data=preds, aes(y=estimate, shape=sig),
size=2, fill="white", col=col_blue_dark) +
facet_grid(scale~effect, scales="free_x", space="free_x",
labeller=labeller(effect=label_wrap_gen(width=12))) +
coord_cartesian(ylim=c(log1p(min(data_plot$recovery)),log1p(max(data_plot$recovery)))) +
scale_shape_manual(values=c(21,19), drop=FALSE, guide="none") +
labs(y="ln(recovery credit +1)") +
theme(panel.background=element_rect(fill="white", colour="grey"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
axis.text.x=element_text(size=8), axis.text.y=element_text(size=6),
axis.title=element_text(size=8), axis.title.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=8),
legend.position="bottom", legend.text=element_text(size=8), legend.key=element_blank())
}else{
p = ggplot(data=NULL, aes(x=treatment)) +
geom_point(data=data_plot, aes(y=log1p(recovery)),
position=position_jitter(width=0.1, height=0),
size=0.5, alpha=0.05, col=col_blue_dark) +
geom_errorbar(data=preds, aes(ymin=conf.low, ymax=conf.high),
width=0, col=col_blue_dark) +
geom_point(data=preds, aes(y=estimate, shape=sig),
size=2, fill="white", col=col_blue_dark) +
facet_grid(scale~effect, scales="free_x", space="free_x",
labeller=labeller(effect=label_wrap_gen(width=12))) +
coord_cartesian(ylim=c(log1p(min(data_plot$recovery)),log1p(max(data_plot$recovery)))) +
scale_shape_manual(values=c(21,19), drop=FALSE, guide="none") +
labs(y="ln(recovery credit +1)") +
theme(panel.background=element_rect(fill="white", colour="grey"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
axis.text.x=element_text(size=8), axis.text.y=element_text(size=6),
axis.title=element_text(size=8), axis.title.x=element_blank(),
strip.background=element_blank(),
strip.text.x=element_blank(), strip.text.y=element_text(size=8),
legend.position="bottom", legend.text=element_text(size=8), legend.key=element_blank())
}
return(p)
}
plot_model_prediction_fullfig_1 = function(data_pop, data_metapop, data_pop_exp, data_metapop_exp,
df_comms, species_plot){
aphid_plot = ifelse(species_plot=="A1", "BB", "LE")
# EMPTY PATCHES
# average across equivalent patches
data_test = data_pop %>%
filter(patch_type=="empty", species==species_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="empty patches")
data_test_exp = data_pop_exp %>%
filter(patch_type=="empty", aphid==aphid_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="empty patches")
# plot
plot_empty = plot_model_prediction_partfig_1(data_test, data_test_exp, df_comms)
# POPULATED PATCHES
# average across equivalent patches
data_test = data_pop %>%
filter(patch_type=="populated", species==species_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="populated patches")
data_test_exp = data_pop_exp %>%
filter(patch_type=="populated", aphid==aphid_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="populated patches")
# plot
plot_populated = plot_model_prediction_partfig_1(data_test, data_test_exp, df_comms)
# METAPOPULATION
# subset data for analysis
data_test = data_metapop %>%
filter(species==species_plot) %>%
mutate(scale="metapopulation")
data_test_exp = data_metapop_exp %>%
filter(aphid==aphid_plot) %>%
mutate(scale="metapopulation")
# plot
plot_meta = plot_model_prediction_partfig_1(data_test, data_test_exp, df_comms)
# combine plots
plot_out = ggarrange(plot_empty, plot_populated, plot_meta,
nrow=3, labels=c("A","B","C"),
common.legend=TRUE, legend="bottom", font.label=list(size=10))
return(plot_out)
}
plot_model_prediction_fullfig_2 = function(data_pop, data_metapop,
df_comms, species_plot){
# EMPTY PATCHES
# average across equivalent patches
data_test = data_pop %>%
filter(patch_type=="empty", species==species_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="empty patches")
# plot
plot_empty = plot_model_prediction_partfig_2(data_test, df_comms)
# POPULATED PATCHES
# average across equivalent patches
data_test = data_pop %>%
filter(patch_type=="populated", species==species_plot) %>%
group_by(community, landscape_patches, landscape_type, landscape, replica) %>%
summarise(recovery=mean(recovery)) %>%
ungroup() %>%
mutate(scale="populated patches")
# plot
plot_populated = plot_model_prediction_partfig_2(data_test, df_comms)
# METAPOPULATION
# subset data for analysis
data_test = data_metapop %>%
filter(species==species_plot) %>%
mutate(scale="metapopulation")
# plot
plot_meta = plot_model_prediction_partfig_2(data_test, df_comms)
# combine plots
plot_out = ggarrange(plot_empty, plot_populated, plot_meta,
nrow=3, labels=c("A","B","C"),
common.legend=TRUE, legend="bottom", font.label=list(size=10))
return(plot_out)
}
# landscape size
n_patches = 50
# landscape adjacency matrix
M_land = as.matrix(read.table(paste0("M_land_",n_patches,".csv"), quote="\"", comment.char=""))
# plot the network
g = graph_from_adjacency_matrix(M_land, mode="undirected")
layout_fixed = layout_with_fr(g)
# patch properties
df_patch = data.frame(patch=1:nrow(M_land),
degree=degree(g),
closeness_centrality=closeness(g),
betweenness_centrality=betweenness(g),
eigen_centrality_values=eigen_centrality(g)$vector)
# patch states (initial communities)
patch_states = matrix(0, 4,nrow(M_land))
#patch_states[1,1]              = 1 # 1C (100 patches)
#patch_states[2,54]             = 1 # 1P (100 patches)
#patch_states[3,c(1,2,5,6)]     = 1 # 4C (100 patches)
#patch_states[4,c(54,88,93,67)] = 1 # 4P (100 patches)
patch_states[1,2]              = 1 # 1C (50 patches)
patch_states[2,47]             = 1 # 1P (50 patches)
patch_states[3,c(2,3,4,7)]     = 1 # 4C (50 patches)
patch_states[4,c(47,35,41,37)] = 1 # 4P (50 patches)
# dataframe with communities for simulations
df_comms = data.frame(community=c("1A","1A-1P","1A-2P","1A-1P-1H","1A-2P-1H",
"2A","2A-1P","2A-2P","2A-1P-1H","2A-2P-1H",
"3A","3A-1P","3A-2P","3A-1P-1H","3A-2P-1H"),
aphids=c(1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3),
ptoids=rep(c(0,1,2,1,2),3),
hypers=rep(c(0,0,0,1,1),3)) %>%
mutate(n_species=aphids+ptoids+hypers,
trophic_levels=ifelse(hypers==0,ifelse(ptoids==0,1,2),3))
# POSTPROCESSING - larger systems ----
# create empty dataframe
df_pop = data.frame(t=integer(),
patch=integer(),
species=character(),
population_size=double(),
dN_comm=double(),
dN_disp=double(),
replica=integer(),
landscape_patches=integer(),
landscape_type=character(),
community=character())
# import and combine results
for(i in 1:nrow(df_comms)){
df_pop = rbind(df_pop,
fread(paste0("out_",df_comms$community[i],"_",n_patches,".csv")))
}
df_pop = df_pop %>%
mutate(
patch=paste0("patch",patch),
landscape_patches=as.factor(landscape_patches),
landscape_type=as.factor(landscape_type),
species=as.factor(species),
community=as.factor(community),
landscape=ifelse(landscape_type=="central", paste0(landscape_patches,"C"), paste0(landscape_patches,"P")))
df_metapop = df_pop %>%
group_by(replica, t, landscape_patches, landscape_type, species, community, landscape) %>%
summarise(metapopulation_size=sum(population_size)) %>%
ungroup()
df_RC_pop = df_pop %>%
group_by(replica, patch, landscape_patches, landscape_type, species, community) %>%
mutate(A_diff=(population_size+lead(population_size))/2*dt,
A_dN_comm=(dN_comm+lead(dN_comm))/2*dt,
A_dN_disp=(dN_disp+lead(dN_disp))/2*dt) %>%
summarise(A_diff=sum(A_diff,na.rm=TRUE),
A_dN_comm=sum(A_dN_comm,na.rm=TRUE),
A_dN_disp=sum(A_dN_disp,na.rm=TRUE)) %>%
left_join(., df_pop %>% filter(t==0) %>% select(-t, -dN_comm, -dN_disp) %>%
rename(pop_t0=population_size)) %>%
mutate(recovery=A_diff,
A_diff=A_diff-pop_t0*tmax) %>%
ungroup() %>%
mutate(patch_type=ifelse(pop_t0!=0, "populated", "empty"))
df_RC_metapop = df_metapop %>%
group_by(replica, landscape_patches, landscape_type, species, community, landscape) %>%
mutate(A_diff=(metapopulation_size+lead(metapopulation_size))/2*dt) %>%
summarise(A_diff=sum(A_diff,na.rm=TRUE)) %>%
left_join(., df_metapop %>% filter(t==0) %>% select(-t) %>%
rename(metapop_t0=metapopulation_size)) %>%
mutate(recovery=A_diff,
A_diff=A_diff-metapop_t0*tmax) %>%
ungroup()
df_RC_TL = df_RC_metapop %>%
mutate(trophic_level=ifelse(species=="H",3,ifelse(species %in% c("P1","P2"),2,1))) %>%
group_by(replica, landscape_patches, landscape_type, trophic_level, community, landscape) %>%
summarise(recovery=sum(recovery,na.rm=TRUE)) %>%
ungroup() %>%
left_join(., df_comms) %>%
mutate(recovery_av=ifelse(trophic_level==1,recovery/aphids,
ifelse(trophic_level==2,recovery/ptoids,recovery/hypers)))
# METAPOPULATION
data_test = df_RC_metapop %>%
filter(species=="A1") %>%
mutate(scale="metapopulation") %>%
left_join(., df_comms)
# linear anova, recovery log(x+1) transformed (to deal with 0-values)
anova_m2 = lm(log1p(recovery) ~ landscape_patches*landscape_type*community, data=data_test)
anova(anova_m2)
# average predictions
pred_landscape_patches = avg_predictions(anova_m2, variables="landscape_patches", by="landscape_patches")
pred_landscape_type = avg_predictions(anova_m2, variables="landscape_type", by="landscape_type")
pred_community = avg_predictions(anova_m2, variables="community", by="community")
# average comparisons
comp_patches = avg_comparisons(anova_m2, variables="landscape_patches")
comp_type = avg_comparisons(anova_m2, variables="landscape_type")
comp_community = avg_predictions(anova_m2, variables="community",
hypothesis=c("b2-b1=0","b6-b1=0",
"b3-b2=0","b4-b2=0","b7-b2=0",
"b5-b3=0","b8-b3=0",
"b5-b4=0","b9-b4=0",
"b10-b5=0",
"b7-b6=0","b11-b6=0",
"b8-b7=0","b9-b7=0","b12-b7=0",
"b10-b8=0","b13-b8=0",
"b10-b9=0","b14-b9=0",
"b15-b10=0",
"b12-b11=0",
"b13-b12=0","b14-b12=0",
"b15-b13=0",
"b15-b14=0"))
comp_community_all = t(outer(pred_community$estimate, pred_community$estimate, FUN="-"))
rownames(comp_community_all) = pred_community$community
colnames(comp_community_all) = pred_community$community
comp_community_all[1,-c(2,6)] = NA
comp_community_all[2,-c(3,4,7)] = NA
comp_community_all[3,-c(5,8)] = NA
comp_community_all[4,-c(5,9)] = NA
comp_community_all[5,-c(10)] = NA
comp_community_all[6,-c(7,11)] = NA
comp_community_all[7,-c(8,9,12)] = NA
comp_community_all[8,-c(10,13)] = NA
comp_community_all[9,-c(10,14)] = NA
comp_community_all[10,-c(15)] = NA
comp_community_all[11,-c(12)] = NA
comp_community_all[12,-c(13,14)] = NA
comp_community_all[13,-c(15)] = NA
comp_community_all[14,-c(15)] = NA
comp_community_all[15,] = NA
# % change
comp_patches$estimate / pred_landscape_patches$estimate[1] * 100
comp_type$estimate / pred_landscape_type$estimate[1] * 100
com_community_change = comp_community_all / pred_community$estimate * 100
com_community_change[com_community_change>100] = 0
com_community_change[com_community_change<(-100)] = 0
# dataframe with % change for community effect
df_comm_effect = data.frame(expand.grid(community=row.names(com_community_change),
community2=row.names(com_community_change)),
effect=as.vector(com_community_change)) %>%
na.omit() %>%
left_join(., df_comms) %>%
left_join(., df_comms, by=c("community2"="community")) %>%
mutate(community_change=ifelse((aphids.y-aphids.x)==1,"+A",
ifelse((ptoids.y-ptoids.x)==1,"+P","+H")),
community=as.factor(fct_reorder(community, n_species.x+0.01*trophic_levels.x)))
df_comm_effect$community_change = factor(df_comm_effect$community_change, c("+A","+P","+H"))
# plot community change effect
plot_lim = max(abs(df_comm_effect$effect))
ggplot(data=df_comm_effect,
aes(x=community_change, y=fct_reorder(community, n_species.x+0.01*trophic_levels.x, .desc=TRUE),
fill=effect)) +
geom_point(size=6, shape=21, col="grey") +
coord_fixed() +
scale_fill_distiller(palette="RdBu", limits=c(-plot_lim,plot_lim), direction=1) +
labs(x="species addition", y="community food web", fill="% change\nin recovery\ncredit") +
theme(panel.background=element_rect(fill="white", colour="grey"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
strip.background=element_blank(),
axis.text=element_text(size=8), axis.title=element_text(size=8),
strip.text=element_text(size=10),
legend.text=element_text(size=6), legend.title=element_text(size=8),
legend.position="right")
ggsave("Fig_sim_community.png", path="../manuscript/figures/",
width=width_singlecol, height=100, units="mm", dpi=600)
ggsave("Fig_sim_community.png", path="../manuscript/figures/",
width=width_singlecol, height=110, units="mm", dpi=600)
ggsave("Fig_sim_community.png", path="../manuscript/figures/",
width=width_singlecol, height=120, units="mm", dpi=600)
ggsave("Fig_sim_community.png", path="../manuscript/figures/",
width=width_singlecol, height=100, units="mm", dpi=600)
rm(list=ls())
# load packages
library(dplyr)
library(ggplot2)
library(tidyr)
library(spatstat.geom)
library(lubridate)
library(ggpubr)
setwd("C:/Users/klegaw/OneDrive - UKCEH/Projects/experiment/recovery_foodweb_experiment")
data_BRBR <- read.csv("Data/parameterisation_data_BRBR.csv") %>%
mutate(replica=as.factor(replica))
data_LIER <- read.csv("Data/parameterisation_data_LIER.csv") %>%
mutate(replica=as.factor(replica))
data_BRBR <- data_BRBR %>%
mutate(datetime = dmy_hms(paste(date, time)),
# combine date and time into one string
t_day = as.numeric(difftime(datetime, datetime[1],, units="days"))
# time since start in days
) %>%
group_by(replica) %>%
mutate(A_t = patch1_wingless,
# number of aphids in patch 1 at time t
A_t1 = lead(A_t),
# number of aphids in patch 1 at time t+1
E = lead(patch2_winged) + lead(patch2_wingless),
# total numer of emigrated aphids (counted at t+1)
dt = lead(t_day) - t_day
# delta time
) %>%
ungroup()
data_LIER <- data_LIER %>%
mutate(datetime = dmy_hms(paste(date, time)),
# combine date and time into one string
t_day = as.numeric(difftime(datetime, datetime[1],, units="days"))
# time since start in days
) %>%
group_by(replica) %>%
mutate(A_t = patch1_wingless,
# number of aphids in patch 1 at time t
A_t1 = lead(A_t),
# number of aphids in patch 1 at time t+1
E = lead(patch2_winged) + lead(patch2_wingless),
# total numer of emigrated aphids (counted at t+1)
dt = lead(t_day) - t_day
# delta time
) %>%
ungroup()
View(data_BRBR)
ggplot(data=data_BRBR) +
geom_jitter(aes(y=patch2_wingless), col="red") +
geom_jitter(aes(y=patch2_winged), col="blue")
ggplot(data=data_BRBR) +
geom_jitter(aes(x=1, y=patch2_wingless), col="red") +
geom_jitter(aes(x=1, y=patch2_winged), col="blue")
ggplot(data=data_BRBR) +
geom_jitter(aes(x="wingless", y=patch2_wingless), col="red") +
geom_jitter(aes(x="winged", y=patch2_winged), col="blue")
View(data_BRBR)
ggplot(data=data_BRBR, aes(x=t_day, group=replica)) +
geom_line(aes(y=patch2_wingless), col="red")
ggplot(data=data_BRBR, aes(x=t_day, group=replica)) +
geom_line(aes(y=patch2_wingless), col="red") +
geom_line(aes(y=patch2_winged), col="blue")
ggplot(data=data_LIER) +
geom_jitter(aes(x="wingless", y=patch2_wingless), col="red") +
geom_jitter(aes(x="winged", y=patch2_winged), col="blue")
data_LIER
data_LIER <- data_LIER %>%
mutate(datetime = dmy_hms(paste(date, time)),
# combine date and time into one string
t_day = as.numeric(difftime(datetime, datetime[1],, units="days"))
# time since start in days
) %>%
group_by(replica) %>%
mutate(A_t = patch1_wingless,
# number of aphids in patch 1 at time t
A_t1 = lead(A_t),
# number of aphids in patch 1 at time t+1
E = lead(patch2_winged) + lead(patch2_wingless),
# total numer of emigrated aphids (counted at t+1)
dt = lead(t_day) - t_day
# delta time
) %>%
ungroup()
ggplot(data=data_LIER) +
geom_jitter(aes(x="wingless", y=patch2_wingless), col="red") +
geom_jitter(aes(x="winged", y=patch2_winged), col="blue")
ggplot(data=data_LIER, aes(x=t_day, group=replica)) +
geom_line(aes(y=patch2_wingless), col="red") +
geom_line(aes(y=patch2_winged), col="blue")
